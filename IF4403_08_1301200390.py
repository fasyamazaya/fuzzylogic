# -*- coding: utf-8 -*-
"""Tubes 2 AI Kelompok 8 (revisi)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18WSxRv12U0yNuY0qpmRuDE-_07oFuqA-

*Kelompok* 8  

*   Raden Fasya Mazaya Putri - 1301200390  
*   Zahwa Dewi Artika - 1301200470

---
  
SOURCE CODE ALGORITMA FUZZY SYSTEMS   
PENGENALAN AI  
  


---

**Import Data dari File**
"""

import pandas as pd

bengkel = pd.read_excel("bengkel.xlsx")
bengkel

"""**Read Data**"""

#input mengandung 3 atribut yaitu id, servis, dan harga yang masing-masing sejumlah 100 data
id = bengkel["id"]
servis = bengkel["servis"]
harga = bengkel["harga"]

"""**Nilai Servis**

---

Buruk = 0 - 35

Biasa = 25 - 60

Baik = 50 - 80

Sangat Baik = 70 - 100



**Nilai Harga**


---

Murah  <= 5

Biasa  3 - 9

Mahal  >= 7



Tidak Rekomendasi  = 25

Rekomendasi  = 50

Sangat Rekomendasi  = 75



**Fuzzy System**
"""

def fuzzySystem(x, hasilProsesFuzzy):
  for i in range(x):
    nilaiServis = [0, 0, 0, 0] #tiap indeks mewakili satu kategori. indeks 0 = buruk, 1 = biasa, 2 = baik, dan 3 = sangat baik
    nilaiHarga = [0, 0, 0] #tiap indeks mewakili satu kategori. indeks 0 = murah, 1 = standar, dan 2 = mahal
    buruk = biasa = baik = sangat_baik = 0
    mahal = standar = murah = 0

    #proses fuzzifikasi pada servis
    if servis[i] <= 35:
      buruk = 1
      nilaiServis[0] = buruk
    elif servis[i] > 25 and servis[i] < 35:
      buruk = (35 - servis[i]) / 10
      biasa = (servis[i] - 25) / 10
      nilaiServis[0] = buruk
      nilaiServis[1] = biasa
    elif servis[i] >= 35 and servis[i] <= 50:
      biasa = 1
      nilaiServis[1] = biasa
    elif servis[i] > 50 and servis[i] < 60:
      biasa = (60 - servis[i]) / 10
      baik = (servis[i] - 50) / 10
      nilaiServis[1] = biasa
      nilaiServis[2] = baik
    elif servis[i] >= 60 and servis[i] <= 70:
      baik = 1
      nilaiServis[2] = baik
    elif servis[i] > 70 and servis[i] < 80:
      baik = (80 - servis[i]) / 10
      sangat_baik = (servis[i] - 70) / 10
      nilaiServis[2] = baik
      nilaiServis[3] = sangat_baik
    elif servis[i] >= 80:
      sangat_baik = 1
      nilaiServis[3] = sangat_baik

    #proses fuzzifikasi pada harga
    if harga[i] <= 3:
      murah = 1
      nilaiHarga[0] = murah
    elif harga[i] > 3 and harga[i] <= 5:
      murah = (5 - harga[i]) / 2
      standar = (harga[i] - 3) / 2
      nilaiHarga[0] = murah
      nilaiHarga[1] = standar
    elif harga[i] > 5 and harga[i] <= 7:
      standar = 1
      nilaiHarga[1] = standar
    elif harga[i] > 7 and harga[i] < 9:
      standar = (9 - harga[i]) / 2
      mahal = (harga[i] / 7) / 2
      nilaiHarga[1] = standar
      nilaiHarga[2] = mahal
    elif harga[i] >= 9:
      mahal = 1
      nilaiHarga[2] = mahal

    #proses inferensi dengan menggunakan Sugeno Model
    listNotRecom    = []
    listRecom       = []
    listSuperRecom  = []

    if nilaiServis[0] == buruk and nilaiHarga[0] == murah :
      listNotRecom.append(min(nilaiServis[0], nilaiHarga[0]))
    if nilaiServis[0] == buruk and nilaiHarga[1] == standar :
      listNotRecom.append(min(nilaiServis[0], nilaiHarga[1]))
    if nilaiServis[0] == buruk and nilaiHarga[2] == mahal :
      listNotRecom.append(min(nilaiServis[0], nilaiHarga[2]))
    if nilaiServis[1] == biasa and nilaiHarga[0] == murah :
      listNotRecom.append(min(nilaiServis[1], nilaiHarga[0]))
    NotRecom = max(listNotRecom)

    if nilaiServis[1] == biasa and nilaiHarga[1] == standar :
      listRecom.append(min(nilaiServis[1], nilaiHarga[1]))
    if nilaiServis[1] == biasa and nilaiHarga[2] == mahal :
      listRecom.append(min(nilaiServis[1], nilaiHarga[2]))
    if nilaiServis[2] == baik and nilaiHarga[0] == murah :
      listRecom.append(min(nilaiServis[2], nilaiHarga[0]))
    if nilaiServis[2] == baik and nilaiHarga[1] == standar :
      listRecom.append(min(nilaiServis[2], nilaiHarga[1]))
    if nilaiServis[3] == sangat_baik and nilaiHarga[0] == murah :
      listRecom.append(min(nilaiServis[3], nilaiHarga[0]))
    Recom = max(listRecom)
  
    if nilaiServis[2] == baik and nilaiHarga[2] == mahal:
      listSuperRecom.append(min(nilaiServis[2], nilaiHarga[2]))
    if nilaiServis[3] == sangat_baik and nilaiHarga[1] == standar:
      listSuperRecom.append(min(nilaiServis[3], nilaiHarga[1]))
    if nilaiServis[3] == sangat_baik and nilaiHarga[2] == mahal:
      listSuperRecom.append(min(nilaiServis[3], nilaiHarga[2]))
    SuperRecom = max(listSuperRecom)

    #proses defuzzifikasi
    a = ((NotRecom * 25) + (Recom * 50) + (SuperRecom * 75)) / (NotRecom + Recom + SuperRecom)
    print(f"ID : {id[i]} ---- SKOR : {a}")
    hasilProsesFuzzy.append([id[i], a])
    print()

"""**Output**"""

def outputMaker(hasilDefuzzification):
  #fungsi ini digunakan untuk mengurutkan hasil deffuzifikasi kemudian mengambil 10 terbaik untuk disimpan dalam sebuah file baru bernama peringkat.xlsx
  data_terurut = sorted(hasilDefuzzification, key = lambda x: x[1], reverse=True)
  data_terbaik = {'Bengkel Terbaik': data_terurut[:10]}

  hasilAKhir = pd.DataFrame(data_terbaik, columns = ['Bengkel Terbaik'])
  hasilAKhir.to_excel('peringkat.xlsx')

"""**Main Program**"""

hasilProsesFuzzy = [] #list untuk menampung hasil fuzzy system
x = 100 #jumlah input dari data
fuzzySystem(x, hasilProsesFuzzy)
outputMaker(hasilProsesFuzzy)